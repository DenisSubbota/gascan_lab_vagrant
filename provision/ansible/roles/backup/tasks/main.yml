---
# tasks file for backup
# This role is for backup nodes, which are also in their MySQL version group (e.g., [mysql8], [mysql84])
# TODO: Implement backup node provisioning tasks 

- name: Ensure required packages for backup are installed
  ansible.builtin.apt:
    name:
      - gnupg2
      - wget
      - lsb-release
      - awscli
      - s3cmd
    state: present
    update_cache: true

- name: Download Percona release package
  ansible.builtin.get_url:
    url: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_lsb.codename }}_all.deb"
    dest: /tmp/percona-release_latest_{{ ansible_lsb.codename }}_all.deb
    mode: '0644'

- name: Install Percona release package
  ansible.builtin.apt:
    deb: /tmp/percona-release_latest_{{ ansible_lsb.codename }}_all.deb
    state: present

- name: Enable Percona xtrabackup 8.0 repo (pxb-80) for MySQL 8.0
  ansible.builtin.command: percona-release enable pxb-80 release
  args:
    creates: /etc/apt/sources.list.d/percona-pxb-80-release.list
  when: "'mysql8' in group_names"

- name: Enable Percona xtrabackup 8.4 repo (pxb-84-lts) for MySQL 8.4
  ansible.builtin.command: percona-release enable pxb-84-lts
  args:
    creates: /etc/apt/sources.list.d/percona-pxb-84-lts.list
  when: "'mysql84' in group_names"

- name: Update apt cache after enabling pxb repo
  ansible.builtin.apt:
    update_cache: true

- name: Install xtrabackup for MySQL 8.0
  ansible.builtin.apt:
    name: percona-xtrabackup-80
    state: present
  when: "'mysql8' in group_names"

- name: Install xtrabackup for MySQL 8.4
  ansible.builtin.apt:
    name: percona-xtrabackup-84
    state: present
  when: "'mysql84' in group_names"

- name: Install mydumper (universal for both versions)
  ansible.builtin.apt:
    name: mydumper
    state: present
    update_cache: true

- name: Create backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: percona
    group: percona
    mode: '0755'
  loop:
    - /home/percona/bin
    - /home/percona/.config/percona/backup/
    - /var/log/percona/backups/
    - /root/.config/percona/backup

- name: Download mydumper from GitHub
  ansible.builtin.get_url:
    url: https://github.com/mydumper/mydumper/releases/download/v0.19.3-2/mydumper_0.19.3-2.jammy_amd64.deb
    dest: /tmp/mydumper_0.19.3-2.jammy_amd64.deb
    mode: '0644'

- name: Install mydumper deb package
  ansible.builtin.apt:
    deb: /tmp/mydumper_0.19.3-2.jammy_amd64.deb
    state: present

- name: Download percona-backup binary
  ansible.builtin.get_url:
    url: https://cdba.percona.com/downloads/pex/backup/v0.5.3/amd64/ubuntu-jammy/percona-backup3.10
    dest: /home/percona/bin/percona-backup
    mode: '0755'
    owner: percona
    group: percona

- name: Check if root GPG key exists
  ansible.builtin.stat:
    path: /root/.gnupg/pubring.kbx
  register: gpg_key_stat

- name: Create GPG batch file for root
  ansible.builtin.copy:
    dest: /tmp/root-gpg-batch
    content: |
      %no-protection
      Key-Type: RSA
      Key-Length: 2048
      Name-Real: Directory Encryption
      Name-Email: directory.encryption@percona.com
      Expire-Date: 0
      Passphrase: password
      %commit
    mode: '0600'
  when: not gpg_key_stat.stat.exists

- name: Generate GPG key for root user (idempotent)
  ansible.builtin.command:
    cmd: gpg --batch --gen-key /tmp/root-gpg-batch
  args:
    creates: /root/.gnupg/pubring.kbx
  when: not gpg_key_stat.stat.exists

- name: Remove GPG batch file after use
  ansible.builtin.file:
    path: /tmp/root-gpg-batch
    state: absent
  when: not gpg_key_stat.stat.exists

- name: Ensure GPG passphrase file for root
  ansible.builtin.copy:
    dest: /root/.gpg_passphrase
    content: "password"
    owner: root
    group: root
    mode: '0600'

- name: Ensure .my.cnf for percona user
  ansible.builtin.copy:
    dest: /home/percona/.my.cnf
    content: |
      [client]
      user=percona
      password=Percona1234
    owner: percona
    group: percona
    mode: '0600'

- name: Ensure .my.cnf for root user
  ansible.builtin.copy:
    dest: /root/.my.cnf
    content: |
      [client]
      user=percona
      password=Percona1234
    owner: root
    group: root
    mode: '0600'

- name: Create static xb_keyfile for xtrabackup encryption
  ansible.builtin.copy:
    dest: /home/percona/.config/percona/backup/xb_keyfile
    content: "000000000000000000000000"
    owner: percona
    group: percona
    mode: '0600'

- name: Create dir_encrypt.yml for directory encryption
  ansible.builtin.copy:
    dest: /root/.config/percona/backup/dir_encrypt.yml
    content: |
      'encryption recipient': 'directory.encryption@percona.com'
      'encryption home dir': '/root/.gnupg'
      'max encryption processes': 5
      'encryption nice': False
      'gpg bin': '/usr/bin/gpg'
      'encryption file filter': ''
    owner: root
    group: root
    mode: '0600'

- name: Check if .env file exists
  ansible.builtin.stat:
    path: /vagrant/config/.env
  register: env_file

- name: Slurp .env file if present
  ansible.builtin.slurp:
    src: /vagrant/config/.env
  register: env_content
  when: env_file.stat.exists

- name: Parse .env variables
  set_fact:
    env_vars: >-
      {{ dict((env_content['content'] | b64decode | regex_findall('([A-Z0-9_]+)=([^\n]+)'))) }}
  when: env_file.stat.exists

- name: Set S3/AWS config variables if .env present
  set_fact:
    aws_s3_enabled: true
    s3_bucket: "{{ env_vars.S3_BUCKET }}"
    aws_access_key_id: "{{ env_vars.AWS_ACCESS_KEY_ID }}"
    aws_secret_access_key: "{{ env_vars.AWS_SECRET_ACCESS_KEY }}"
  when: env_file.stat.exists and env_vars.S3_BUCKET is defined and env_vars.AWS_ACCESS_KEY_ID is defined and env_vars.AWS_SECRET_ACCESS_KEY is defined

- name: Set S3/AWS config variables to defaults if .env not present
  set_fact:
    aws_s3_enabled: false
    s3_bucket: ""
    aws_access_key_id: ""
    aws_secret_access_key: ""
  when: env_file.stat.exists == false or env_vars.S3_BUCKET is not defined or env_vars.AWS_ACCESS_KEY_ID is not defined or env_vars.AWS_SECRET_ACCESS_KEY is not defined

- name: Find alias for replication_source_host
  set_fact:
    replication_source_alias: "{{ item }}"
  when:
    - replication_source_host is defined
    - hostvars[item].ansible_host == replication_source_host
  loop: "{{ groups['all'] }}"

- name: Render backup config for MySQL 8.0
  ansible.builtin.template:
    src: backup_config8.yml.j2
    dest: /home/percona/.config/percona/backup/backup_config.yml
    owner: percona
    group: percona
    mode: '0644'
  when: "'mysql8' in group_names"

- name: Render backup config for MySQL 8.4
  ansible.builtin.template:
    src: backup_config.yml.j2
    dest: /home/percona/.config/percona/backup/backup_config.yml
    owner: percona
    group: percona
    mode: '0644'
  when: "'mysql84' in group_names"

- name: Ensure /root/.aws directory exists
  ansible.builtin.file:
    path: /root/.aws
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Configure /root/.aws/credentials if aws_s3_enabled
  ansible.builtin.copy:
    dest: /root/.aws/credentials
    content: |
      [default]
      aws_access_key_id = {{ aws_access_key_id }}
      aws_secret_access_key = {{ aws_secret_access_key }}
    owner: root
    group: root
    mode: '0600'
  when: aws_s3_enabled

- name: Configure /root/.aws/config if aws_s3_enabled
  ansible.builtin.copy:
    dest: /root/.aws/config
    content: |
      [default]
      region = us-east-1
      output = json
    owner: root
    group: root
    mode: '0600'
  when: aws_s3_enabled

- name: Configure /root/.s3cfg if aws_s3_enabled
  ansible.builtin.copy:
    dest: /root/.s3cfg
    content: |
      [default]
      access_key = {{ aws_access_key_id }}
      secret_key = {{ aws_secret_access_key }}
      bucket_location = us-east-1
      use_https = True
    owner: root
    group: root
    mode: '0600'
  when: aws_s3_enabled

- name: Verify S3 access with s3cmd if aws_s3_enabled
  ansible.builtin.command:
    cmd: s3cmd info {{ s3_bucket }}
  register: s3cmd_result
  ignore_errors: true
  when: aws_s3_enabled

- name: Ensure backup cron job is present if enabled
  ansible.builtin.cron:
    name: "percona-backup cron job"
    user: root
    minute: "*"
    job: >-
      PERCONA_BACKUP_TEXTFILE_COLLECTOR_DIR='/home/percona/pmm/collectors/textfile-collector/low-resolution/' \
      PEX_SCRIPT=backup_driver.py /home/percona/bin/percona-backup \
      --config /home/percona/.config/percona/backup/backup_config.yml -l /tmp/backup_driver.lock
  when: backup_cron_enabled | default(false)

# Optionally, add S3 and AWS CLI configuration here if enable_s3 is true
# (You can extend this with Ansible's lineinfile/template modules as needed) 